
SDCardInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004870  08004870  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080048e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080048e8  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6fd  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6a  00000000  00000000  0002c79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c10  00000000  00000000  0002f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b92c  00000000  00000000  00057430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6238  00000000  00000000  00062d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158f94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  00158fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004788 	.word	0x08004788

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004788 	.word	0x08004788

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b0f9      	sub	sp, #484	; 0x1e4
 80005dc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fba0 	bl	8000d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f847 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f92d 	bl	8000844 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f8fb 	bl	80007e4 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80005ee:	f000 f8d3 	bl	8000798 <MX_SDMMC1_SD_Init>





  HAL_SD_GetCardInfo(&hsd1, &sdcard_info);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4619      	mov	r1, r3
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <main+0x90>)
 80005fa:	f002 fa01 	bl	8002a00 <HAL_SD_GetCardInfo>

  //int ndata = snprintf(buffer,200,"Card_Type: %d - DataBus Width: %d\n",sd1_status.CardType,sd1_status.DataBusWidth);
  int ndata = snprintf(buffer,400,"CardType: %lu\nCardVersion: %lu\nClass: %lu\nRelCardAdd: %lu\nBlockNbr: %lu\nBlockSize: %lu\nLogBlockNbr: %lu\nLogBlockSize: %lu\n",sdcard_info.CardType,sdcard_info.CardVersion,sdcard_info.Class,sdcard_info.RelCardAdd,sdcard_info.BlockNbr,sdcard_info.BlockSize,sdcard_info.LogBlockNbr,sdcard_info.LogBlockSize);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f107 020c 	add.w	r2, r7, #12
 8000610:	6892      	ldr	r2, [r2, #8]
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	68c9      	ldr	r1, [r1, #12]
 8000618:	f107 000c 	add.w	r0, r7, #12
 800061c:	6900      	ldr	r0, [r0, #16]
 800061e:	f107 040c 	add.w	r4, r7, #12
 8000622:	6964      	ldr	r4, [r4, #20]
 8000624:	f107 050c 	add.w	r5, r7, #12
 8000628:	69ad      	ldr	r5, [r5, #24]
 800062a:	f107 060c 	add.w	r6, r7, #12
 800062e:	69f6      	ldr	r6, [r6, #28]
 8000630:	f107 0c2c 	add.w	ip, r7, #44	; 0x2c
 8000634:	9606      	str	r6, [sp, #24]
 8000636:	9505      	str	r5, [sp, #20]
 8000638:	9404      	str	r4, [sp, #16]
 800063a:	9003      	str	r0, [sp, #12]
 800063c:	9102      	str	r1, [sp, #8]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <main+0x94>)
 8000646:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800064a:	4660      	mov	r0, ip
 800064c:	f003 fc5a 	bl	8003f04 <sniprintf>
 8000650:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
  HAL_UART_Transmit(&huart3, buffer,ndata,100);
 8000654:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000658:	b29a      	uxth	r2, r3
 800065a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <main+0x98>)
 8000662:	f002 fba1 	bl	8002da8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0x8e>
 8000668:	2000011c 	.word	0x2000011c
 800066c:	080047a0 	.word	0x080047a0
 8000670:	20000098 	.word	0x20000098

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b8      	sub	sp, #224	; 0xe0
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fc36 	bl	8003ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2290      	movs	r2, #144	; 0x90
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fc27 	bl	8003ef4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a6:	f000 fe69 	bl	800137c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <SystemClock_Config+0x118>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SystemClock_Config+0x118>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <SystemClock_Config+0x118>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <SystemClock_Config+0x11c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ca:	4a31      	ldr	r2, [pc, #196]	; (8000790 <SystemClock_Config+0x11c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <SystemClock_Config+0x11c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000702:	2360      	movs	r3, #96	; 0x60
 8000704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000708:	2304      	movs	r3, #4
 800070a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe3f 	bl	800139c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000724:	f000 f992 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000748:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f8d2 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800075a:	f000 f977 	bl	8000a4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <SystemClock_Config+0x120>)
 8000760:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000762:	2300      	movs	r3, #0
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800076a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fac2 	bl	8001cfc <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800077e:	f000 f965 	bl	8000a4c <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	37e0      	adds	r7, #224	; 0xe0
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000
 8000794:	00800100 	.word	0x00800100

08000798 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_SDMMC1_SD_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_SDMMC1_SD_Init+0x44>)
 80007c8:	f001 fec0 	bl	800254c <HAL_SD_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 f93b 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000011c 	.word	0x2000011c
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART3_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART3_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000828:	f002 fa70 	bl	8002d0c <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f90b 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098
 8000840:	40004800 	.word	0x40004800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b76      	ldr	r3, [pc, #472]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a75      	ldr	r2, [pc, #468]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b73      	ldr	r3, [pc, #460]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b70      	ldr	r3, [pc, #448]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a69      	ldr	r2, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a63      	ldr	r2, [pc, #396]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a5d      	ldr	r2, [pc, #372]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b5b      	ldr	r3, [pc, #364]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d2:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a57      	ldr	r2, [pc, #348]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f0:	4851      	ldr	r0, [pc, #324]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80008f2:	f000 fd29 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <MX_GPIO_Init+0x1f8>)
 80008fc:	f000 fd24 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_GPIO_Init+0x1fc>)
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	484b      	ldr	r0, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x200>)
 8000916:	f000 fb6b 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800091a:	2332      	movs	r3, #50	; 0x32
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092a:	230b      	movs	r3, #11
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4843      	ldr	r0, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x200>)
 8000936:	f000 fb5b 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800093a:	2386      	movs	r3, #134	; 0x86
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094a:	230b      	movs	r3, #11
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483c      	ldr	r0, [pc, #240]	; (8000a48 <MX_GPIO_Init+0x204>)
 8000956:	f000 fb4b 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800095a:	f244 0381 	movw	r3, #16513	; 0x4081
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4831      	ldr	r0, [pc, #196]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 8000974:	f000 fb3c 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4828      	ldr	r0, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 8000996:	f000 fb2b 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4822      	ldr	r0, [pc, #136]	; (8000a3c <MX_GPIO_Init+0x1f8>)
 80009b2:	f000 fb1d 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <MX_GPIO_Init+0x1f8>)
 80009ca:	f000 fb11 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4817      	ldr	r0, [pc, #92]	; (8000a48 <MX_GPIO_Init+0x204>)
 80009ec:	f000 fb00 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x204>)
 8000a06:	f000 faf3 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0x1f8>)
 8000a28:	f000 fae2 	bl	8000ff0 <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40021800 	.word	0x40021800
 8000a40:	10110000 	.word	0x10110000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020000 	.word	0x40020000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <HAL_SD_MspInit+0xb4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d144      	bne.n	8000b4c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_SD_MspInit+0xb8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000b0a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <HAL_SD_MspInit+0xbc>)
 8000b28:	f000 fa62 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_SD_MspInit+0xc0>)
 8000b48:	f000 fa52 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x7c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d128      	bne.n	8000bd8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_UART_MspInit+0x80>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000bd4:	f000 fa0c 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40004800 	.word	0x40004800
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f8b0 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f003 f916 	bl	8003ea0 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20080000 	.word	0x20080000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	2000008c 	.word	0x2000008c
 8000ca8:	200001b8 	.word	0x200001b8

08000cac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 f8d5 	bl	8003eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc69 	bl	80005d8 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d14:	08004878 	.word	0x08004878
  ldr r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d1c:	200001b4 	.word	0x200001b4

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>

08000d22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f92e 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f805 	bl	8000d3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d32:	f7ff fe91 	bl	8000a58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f93b 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f911 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200001a0 	.word	0x200001a0

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200001a0 	.word	0x200001a0

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <__NVIC_SetPriorityGrouping+0x40>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x40>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	05fa0000 	.word	0x05fa0000

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff47 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff5c 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffb0 	bl	8000f44 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e175      	b.n	80012fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8164 	bne.w	80012f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d00b      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001042:	2b11      	cmp	r3, #17
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x100>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80be 	beq.w	80012f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <HAL_GPIO_Init+0x324>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001192:	4a61      	ldr	r2, [pc, #388]	; (8001318 <HAL_GPIO_Init+0x328>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d037      	beq.n	800122e <HAL_GPIO_Init+0x23e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_GPIO_Init+0x330>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d031      	beq.n	800122a <HAL_GPIO_Init+0x23a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_GPIO_Init+0x334>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02b      	beq.n	8001226 <HAL_GPIO_Init+0x236>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a55      	ldr	r2, [pc, #340]	; (8001328 <HAL_GPIO_Init+0x338>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d025      	beq.n	8001222 <HAL_GPIO_Init+0x232>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <HAL_GPIO_Init+0x33c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01f      	beq.n	800121e <HAL_GPIO_Init+0x22e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a53      	ldr	r2, [pc, #332]	; (8001330 <HAL_GPIO_Init+0x340>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x22a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_GPIO_Init+0x344>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x348>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x34c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x350>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x21a>
 8001206:	2309      	movs	r3, #9
 8001208:	e012      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120a:	230a      	movs	r3, #10
 800120c:	e010      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120e:	2308      	movs	r3, #8
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001212:	2307      	movs	r3, #7
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x328>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_GPIO_Init+0x354>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001272:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_GPIO_Init+0x354>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_GPIO_Init+0x354>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_GPIO_Init+0x354>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae86 	bls.w	8001010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40022000 	.word	0x40022000
 8001340:	40022400 	.word	0x40022400
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000

0800139c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e29b      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8087 	beq.w	80014ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013cc:	4b93      	ldr	r3, [pc, #588]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d112      	bne.n	80013fe <HAL_RCC_OscConfig+0x62>
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e4:	d10b      	bne.n	80013fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4b8d      	ldr	r3, [pc, #564]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d06c      	beq.n	80014cc <HAL_RCC_OscConfig+0x130>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d168      	bne.n	80014cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e275      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x7a>
 8001408:	4b84      	ldr	r3, [pc, #528]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a83      	ldr	r2, [pc, #524]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e02e      	b.n	8001474 <HAL_RCC_OscConfig+0xd8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x9c>
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a7e      	ldr	r2, [pc, #504]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7b      	ldr	r2, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xd8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0xc0>
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a75      	ldr	r2, [pc, #468]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b73      	ldr	r3, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xd8>
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b6c      	ldr	r3, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6b      	ldr	r2, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fca2 	bl	8000dc4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc9e 	bl	8000dc4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e229      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc8e 	bl	8000dc4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fc8a 	bl	8000dc4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e215      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b57      	ldr	r3, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x110>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d069      	beq.n	80015ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014da:	4b50      	ldr	r3, [pc, #320]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b4d      	ldr	r3, [pc, #308]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x190>
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x17a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1e9      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	493d      	ldr	r1, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e040      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d023      	beq.n	800157c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a38      	ldr	r2, [pc, #224]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc40 	bl	8000dc4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fc3c 	bl	8000dc4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1c7      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4929      	ldr	r1, [pc, #164]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
 800157a:	e018      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x280>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc1c 	bl	8000dc4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc18 	bl	8000dc4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1a3      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d038      	beq.n	800162c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbf9 	bl	8000dc4 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fbf5 	bl	8000dc4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e180      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x23a>
 80015f4:	e01a      	b.n	800162c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_RCC_OscConfig+0x280>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fbdf 	bl	8000dc4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fbdb 	bl	8000dc4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d903      	bls.n	8001620 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e166      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
 800161c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b92      	ldr	r3, [pc, #584]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a4 	beq.w	8001782 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b8c      	ldr	r3, [pc, #560]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a88      	ldr	r2, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b86      	ldr	r3, [pc, #536]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001662:	4b83      	ldr	r3, [pc, #524]	; (8001870 <HAL_RCC_OscConfig+0x4d4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800166e:	4b80      	ldr	r3, [pc, #512]	; (8001870 <HAL_RCC_OscConfig+0x4d4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7f      	ldr	r2, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x4d4>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff fba3 	bl	8000dc4 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff fb9f 	bl	8000dc4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e12a      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x4d4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x31a>
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a6f      	ldr	r2, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e02d      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x33c>
 80016be:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	4a6a      	ldr	r2, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ca:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a67      	ldr	r2, [pc, #412]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
 80016d6:	e01c      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x35e>
 80016e0:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a61      	ldr	r2, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a5e      	ldr	r2, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	; 0x70
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d015      	beq.n	8001746 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fb53 	bl	8000dc4 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fb4f 	bl	8000dc4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0d8      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ee      	beq.n	8001722 <HAL_RCC_OscConfig+0x386>
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fb3d 	bl	8000dc4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fb39 	bl	8000dc4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0c2      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ee      	bne.n	800174e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d105      	bne.n	8001782 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800177c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80ae 	beq.w	80018e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d06d      	beq.n	8001874 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d14b      	bne.n	8001838 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb0a 	bl	8000dc4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fb06 	bl	8000dc4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e091      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	071b      	lsls	r3, r3, #28
 80017fe:	491b      	ldr	r1, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fad8 	bl	8000dc4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fad4 	bl	8000dc4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e05f      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x47c>
 8001836:	e057      	b.n	80018e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 800183e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fabe 	bl	8000dc4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff faba 	bl	8000dc4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e045      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_OscConfig+0x4d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x4b0>
 800186a:	e03d      	b.n	80018e8 <HAL_RCC_OscConfig+0x54c>
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0x558>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d030      	beq.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d129      	bne.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d122      	bne.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d119      	bne.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10f      	bne.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	4965      	ldr	r1, [pc, #404]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 800195e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e073      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4936      	ldr	r1, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ec:	f7ff f9ea 	bl	8000dc4 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f9e6 	bl	8000dc4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e053      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d210      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1d4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f946 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	0800481c 	.word	0x0800481c
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae8:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d00d      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	f200 80bd 	bhi.w	8001c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b02:	e0b7      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b06:	60bb      	str	r3, [r7, #8]
      break;
 8001b08:	e0b7      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b0c:	60bb      	str	r3, [r7, #8]
      break;
 8001b0e:	e0b4      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04d      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	ea02 0800 	and.w	r8, r2, r0
 8001b3e:	ea03 0901 	and.w	r9, r3, r1
 8001b42:	4640      	mov	r0, r8
 8001b44:	4649      	mov	r1, r9
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	014b      	lsls	r3, r1, #5
 8001b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b54:	0142      	lsls	r2, r0, #5
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	018b      	lsls	r3, r1, #6
 8001b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b70:	0182      	lsls	r2, r0, #6
 8001b72:	1a12      	subs	r2, r2, r0
 8001b74:	eb63 0301 	sbc.w	r3, r3, r1
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	00d9      	lsls	r1, r3, #3
 8001b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b86:	00d0      	lsls	r0, r2, #3
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	eb12 0208 	adds.w	r2, r2, r8
 8001b90:	eb43 0309 	adc.w	r3, r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0259      	lsls	r1, r3, #9
 8001b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ba2:	0250      	lsls	r0, r2, #9
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f7fe fb94 	bl	80002e0 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e04a      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	ea02 0400 	and.w	r4, r2, r0
 8001bda:	ea03 0501 	and.w	r5, r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	014b      	lsls	r3, r1, #5
 8001bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf0:	0142      	lsls	r2, r0, #5
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	1b00      	subs	r0, r0, r4
 8001bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	018b      	lsls	r3, r1, #6
 8001c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c0a:	0182      	lsls	r2, r0, #6
 8001c0c:	1a12      	subs	r2, r2, r0
 8001c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	00d9      	lsls	r1, r3, #3
 8001c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c20:	00d0      	lsls	r0, r2, #3
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	1912      	adds	r2, r2, r4
 8001c28:	eb45 0303 	adc.w	r3, r5, r3
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0299      	lsls	r1, r3, #10
 8001c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c3a:	0290      	lsls	r0, r2, #10
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f7fe fb48 	bl	80002e0 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	60bb      	str	r3, [r7, #8]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c76:	60bb      	str	r3, [r7, #8]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	0800482c 	.word	0x0800482c

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffdc 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	0800482c 	.word	0x0800482c

08001cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d24:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a68      	ldr	r2, [pc, #416]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d2e:	6093      	str	r3, [r2, #8]
 8001d30:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	4964      	ldr	r1, [pc, #400]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d017      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	4959      	ldr	r1, [pc, #356]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d74:	d101      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d017      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d92:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	494a      	ldr	r1, [pc, #296]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db0:	d101      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 808b 	beq.w	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a34      	ldr	r2, [pc, #208]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e04:	f7fe ffde 	bl	8000dc4 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7fe ffda 	bl	8000dc4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e38f      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d035      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d02e      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d114      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ffa2 	bl	8000dc4 <HAL_GetTick>
 8001e80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff9e 	bl	8000dc4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e351      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ee      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	4901      	ldr	r1, [pc, #4]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	0ffffcff 	.word	0x0ffffcff
 8001ed8:	4bb3      	ldr	r3, [pc, #716]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4ab2      	ldr	r2, [pc, #712]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ede:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ee2:	6093      	str	r3, [r2, #8]
 8001ee4:	4bb0      	ldr	r3, [pc, #704]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	49ad      	ldr	r1, [pc, #692]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f02:	4ba9      	ldr	r3, [pc, #676]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f08:	4aa7      	ldr	r2, [pc, #668]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f12:	4ba5      	ldr	r3, [pc, #660]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	49a2      	ldr	r1, [pc, #648]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f30:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f3e:	499a      	ldr	r1, [pc, #616]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f52:	4b95      	ldr	r3, [pc, #596]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f60:	4991      	ldr	r1, [pc, #580]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f82:	4989      	ldr	r1, [pc, #548]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f96:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4980      	ldr	r1, [pc, #512]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb8:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4978      	ldr	r1, [pc, #480]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fda:	4b73      	ldr	r3, [pc, #460]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f023 020c 	bic.w	r2, r3, #12
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	496f      	ldr	r1, [pc, #444]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4967      	ldr	r1, [pc, #412]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800201e:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	495e      	ldr	r1, [pc, #376]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	4956      	ldr	r1, [pc, #344]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002062:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002084:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	4945      	ldr	r1, [pc, #276]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b4:	493c      	ldr	r1, [pc, #240]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020c8:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d6:	4934      	ldr	r1, [pc, #208]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d011      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f8:	492b      	ldr	r1, [pc, #172]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002138:	491b      	ldr	r1, [pc, #108]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800215c:	4912      	ldr	r1, [pc, #72]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00f      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	e002      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	4986      	ldr	r1, [pc, #536]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d0:	497d      	ldr	r1, [pc, #500]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d006      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80d6 	beq.w	8002398 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021ec:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe fde4 	bl	8000dc4 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002200:	f7fe fde0 	bl	8000dc4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e195      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d021      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11d      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	0e1b      	lsrs	r3, r3, #24
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	019a      	lsls	r2, r3, #6
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	4958      	ldr	r1, [pc, #352]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02e      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002298:	d129      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a8:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ae:	0f1b      	lsrs	r3, r3, #28
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	019a      	lsls	r2, r3, #6
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	493e      	ldr	r1, [pc, #248]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022dc:	f023 021f 	bic.w	r2, r3, #31
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	3b01      	subs	r3, #1
 80022e6:	4938      	ldr	r1, [pc, #224]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01d      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002300:	0e1b      	lsrs	r3, r3, #24
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	0f1b      	lsrs	r3, r3, #28
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	019a      	lsls	r2, r3, #6
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	431a      	orrs	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	061b      	lsls	r3, r3, #24
 8002328:	431a      	orrs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	071b      	lsls	r3, r3, #28
 800232e:	4926      	ldr	r1, [pc, #152]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d011      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	019a      	lsls	r2, r3, #6
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	071b      	lsls	r3, r3, #28
 800235e:	491a      	ldr	r1, [pc, #104]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800236c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002372:	f7fe fd27 	bl	8000dc4 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800237a:	f7fe fd23 	bl	8000dc4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0d8      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b01      	cmp	r3, #1
 800239c:	f040 80ce 	bne.w	800253c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7fe fd0a 	bl	8000dc4 <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023b2:	e00b      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023b4:	f7fe fd06 	bl	8000dc4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d904      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0bb      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d8:	d0ec      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02e      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12a      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	0f1b      	lsrs	r3, r3, #28
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4944      	ldr	r1, [pc, #272]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800243e:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	493d      	ldr	r1, [pc, #244]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246c:	d11d      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d028      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	0e1b      	lsrs	r3, r3, #24
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	019a      	lsls	r2, r3, #6
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	071b      	lsls	r3, r3, #28
 80024ea:	4917      	ldr	r1, [pc, #92]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4911      	ldr	r1, [pc, #68]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fc56 	bl	8000dc4 <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800251c:	f7fe fc52 	bl	8000dc4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e007      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253a:	d1ef      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e022      	b.n	80025a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fe fa95 	bl	8000aa0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2203      	movs	r2, #3
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f814 	bl	80025ac <HAL_SD_InitCard>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00a      	b.n	80025a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b08e      	sub	sp, #56	; 0x38
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80025c8:	2376      	movs	r3, #118	; 0x76
 80025ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681d      	ldr	r5, [r3, #0]
 80025d0:	466c      	mov	r4, sp
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e4:	4628      	mov	r0, r5
 80025e6:	f001 f83d 	bl	8003664 <SDMMC_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e056      	b.n	80026aa <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f001 f853 	bl	80036bc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002624:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fae2 	bl	8002bf0 <SD_PowerON>
 800262c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e02e      	b.n	80026aa <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa03 	bl	8002a58 <SD_InitCard>
 8002652:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e01b      	b.n	80026aa <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800267a:	4618      	mov	r0, r3
 800267c:	f001 f886 	bl	800378c <SDMMC_CmdBlockLength>
 8002680:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00f      	beq.n	80026a8 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_SD_InitCard+0x108>)
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	004005ff 	.word	0x004005ff

080026b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	0f9b      	lsrs	r3, r3, #30
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e4:	0e1b      	lsrs	r3, r3, #24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b2da      	uxtb	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270e:	b2da      	uxtb	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	b29a      	uxth	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002736:	0bdb      	lsrs	r3, r3, #15
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002748:	0b9b      	lsrs	r3, r3, #14
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	0b5b      	lsrs	r3, r3, #13
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800276c:	0b1b      	lsrs	r3, r3, #12
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	2b00      	cmp	r3, #0
 8002786:	d163      	bne.n	8002850 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002798:	0f92      	lsrs	r2, r2, #30
 800279a:	431a      	orrs	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a4:	0edb      	lsrs	r3, r3, #27
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c8:	0d5b      	lsrs	r3, r3, #21
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	0bdb      	lsrs	r3, r3, #15
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	3302      	adds	r3, #2
 8002810:	2201      	movs	r2, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800281a:	fb02 f203 	mul.w	r2, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7a1b      	ldrb	r3, [r3, #8]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800283c:	0a52      	lsrs	r2, r2, #9
 800283e:	fb02 f203 	mul.w	r2, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
 800284e:	e031      	b.n	80028b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	2b01      	cmp	r3, #1
 8002856:	d11d      	bne.n	8002894 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	3301      	adds	r3, #1
 8002874:	029a      	lsls	r2, r3, #10
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	661a      	str	r2, [r3, #96]	; 0x60
 8002892:	e00f      	b.n	80028b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_SD_GetCardCSD+0x344>)
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e09d      	b.n	80029f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	0b9b      	lsrs	r3, r3, #14
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	09db      	lsrs	r3, r3, #7
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	0fdb      	lsrs	r3, r3, #31
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	0f5b      	lsrs	r3, r3, #29
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	b2da      	uxtb	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	0d9b      	lsrs	r3, r3, #22
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2da      	uxtb	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	0d5b      	lsrs	r3, r3, #21
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	0bdb      	lsrs	r3, r3, #15
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	0b9b      	lsrs	r3, r3, #14
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	b2da      	uxtb	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	0b1b      	lsrs	r3, r3, #12
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	004005ff 	.word	0x004005ff

08002a00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b094      	sub	sp, #80	; 0x50
 8002a5c:	af04      	add	r7, sp, #16
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002a60:	2301      	movs	r3, #1
 8002a62:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fe36 	bl	80036da <SDMMC_GetPowerState>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a78:	e0b6      	b.n	8002be8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d02f      	beq.n	8002ae2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 ff48 	bl	800391c <SDMMC_CmdSendCID>
 8002a8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <SD_InitCard+0x40>
    {
      return errorstate;
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a96:	e0a7      	b.n	8002be8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fe61 	bl	8003766 <SDMMC_GetResponse>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2104      	movs	r1, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fe58 	bl	8003766 <SDMMC_GetResponse>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fe4f 	bl	8003766 <SDMMC_GetResponse>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	210c      	movs	r1, #12
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fe46 	bl	8003766 <SDMMC_GetResponse>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d00d      	beq.n	8002b06 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f107 020e 	add.w	r2, r7, #14
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 ff4e 	bl	8003996 <SDMMC_CmdSetRelAdd>
 8002afa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SD_InitCard+0xae>
    {
      return errorstate;
 8002b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b04:	e070      	b.n	8002be8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d036      	beq.n	8002b7c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002b0e:	89fb      	ldrh	r3, [r7, #14]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 ff18 	bl	8003958 <SDMMC_CmdSendCSD>
 8002b28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b32:	e059      	b.n	8002be8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fe13 	bl	8003766 <SDMMC_GetResponse>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fe0a 	bl	8003766 <SDMMC_GetResponse>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fe01 	bl	8003766 <SDMMC_GetResponse>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	210c      	movs	r1, #12
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fdf8 	bl	8003766 <SDMMC_GetResponse>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2104      	movs	r1, #4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fdef 	bl	8003766 <SDMMC_GetResponse>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	0d1a      	lsrs	r2, r3, #20
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fd8e 	bl	80026b8 <HAL_SD_GetCardCSD>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ba6:	e01f      	b.n	8002be8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	f000 fe09 	bl	80037d0 <SDMMC_CmdSelDesel>
 8002bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SD_InitCard+0x172>
  {
    return errorstate;
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	e00e      	b.n	8002be8 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681d      	ldr	r5, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	466c      	mov	r4, sp
 8002bd2:	f103 0210 	add.w	r2, r3, #16
 8002bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bdc:	3304      	adds	r3, #4
 8002bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be0:	4628      	mov	r0, r5
 8002be2:	f000 fd3f 	bl	8003664 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3740      	adds	r7, #64	; 0x40
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}

08002bf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fe04 	bl	8003816 <SDMMC_CmdGoIdleState>
 8002c0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	e072      	b.n	8002d00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fe17 	bl	8003852 <SDMMC_CmdOperCond>
 8002c24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fded 	bl	8003816 <SDMMC_CmdGoIdleState>
 8002c3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e05b      	b.n	8002d00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d137      	bne.n	8002cc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fe17 	bl	8003890 <SDMMC_CmdAppCommand>
 8002c62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02d      	beq.n	8002cc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c6e:	e047      	b.n	8002d00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fe0a 	bl	8003890 <SDMMC_CmdAppCommand>
 8002c7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SD_PowerON+0x98>
    {
      return errorstate;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	e03b      	b.n	8002d00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	491e      	ldr	r1, [pc, #120]	; (8002d08 <SD_PowerON+0x118>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fe20 	bl	80038d4 <SDMMC_CmdAppOperCommand>
 8002c94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ca0:	e02e      	b.n	8002d00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fd5c 	bl	8003766 <SDMMC_GetResponse>
 8002cae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	0fdb      	lsrs	r3, r3, #31
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <SD_PowerON+0xcc>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <SD_PowerON+0xce>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]

    count++;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d802      	bhi.n	8002cd6 <SD_PowerON+0xe6>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0cc      	beq.n	8002c70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d902      	bls.n	8002ce6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce4:	e00c      	b.n	8002d00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
 8002cf6:	e002      	b.n	8002cfe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	c1100000 	.word	0xc1100000

08002d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e040      	b.n	8002da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd ff18 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8c0 	bl	8002ed0 <UART_SetConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e022      	b.n	8002da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fb16 	bl	8003394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb9d 	bl	80034d8 <UART_CheckIdleState>
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	f040 8081 	bne.w	8002ec4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_Transmit+0x26>
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e079      	b.n	8002ec6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x38>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e072      	b.n	8002ec6 <HAL_UART_Transmit+0x11e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	; 0x21
 8002df4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7fd ffe5 	bl	8000dc4 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e14:	d108      	bne.n	8002e28 <HAL_UART_Transmit+0x80>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e003      	b.n	8002e30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e38:	e02c      	b.n	8002e94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fb90 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e038      	b.n	8002ec6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e007      	b.n	8002e82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cc      	bne.n	8002e3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fb5d 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e005      	b.n	8002ec6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4ba7      	ldr	r3, [pc, #668]	; (8003198 <UART_SetConfig+0x2c8>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a95      	ldr	r2, [pc, #596]	; (800319c <UART_SetConfig+0x2cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d120      	bne.n	8002f8e <UART_SetConfig+0xbe>
 8002f4c:	4b94      	ldr	r3, [pc, #592]	; (80031a0 <UART_SetConfig+0x2d0>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d816      	bhi.n	8002f88 <UART_SetConfig+0xb8>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <UART_SetConfig+0x90>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f7d 	.word	0x08002f7d
 8002f68:	08002f77 	.word	0x08002f77
 8002f6c:	08002f83 	.word	0x08002f83
 8002f70:	2301      	movs	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e14f      	b.n	8003216 <UART_SetConfig+0x346>
 8002f76:	2302      	movs	r3, #2
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e14c      	b.n	8003216 <UART_SetConfig+0x346>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e149      	b.n	8003216 <UART_SetConfig+0x346>
 8002f82:	2308      	movs	r3, #8
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e146      	b.n	8003216 <UART_SetConfig+0x346>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e143      	b.n	8003216 <UART_SetConfig+0x346>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a84      	ldr	r2, [pc, #528]	; (80031a4 <UART_SetConfig+0x2d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d132      	bne.n	8002ffe <UART_SetConfig+0x12e>
 8002f98:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <UART_SetConfig+0x2d0>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d828      	bhi.n	8002ff8 <UART_SetConfig+0x128>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0xdc>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08002ff9 	.word	0x08002ff9
 8002fb4:	08002ff9 	.word	0x08002ff9
 8002fb8:	08002ff9 	.word	0x08002ff9
 8002fbc:	08002fed 	.word	0x08002fed
 8002fc0:	08002ff9 	.word	0x08002ff9
 8002fc4:	08002ff9 	.word	0x08002ff9
 8002fc8:	08002ff9 	.word	0x08002ff9
 8002fcc:	08002fe7 	.word	0x08002fe7
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08002ff9 	.word	0x08002ff9
 8002fdc:	08002ff3 	.word	0x08002ff3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e117      	b.n	8003216 <UART_SetConfig+0x346>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e114      	b.n	8003216 <UART_SetConfig+0x346>
 8002fec:	2304      	movs	r3, #4
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e111      	b.n	8003216 <UART_SetConfig+0x346>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e10e      	b.n	8003216 <UART_SetConfig+0x346>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e10b      	b.n	8003216 <UART_SetConfig+0x346>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a69      	ldr	r2, [pc, #420]	; (80031a8 <UART_SetConfig+0x2d8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d120      	bne.n	800304a <UART_SetConfig+0x17a>
 8003008:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <UART_SetConfig+0x2d0>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003012:	2b30      	cmp	r3, #48	; 0x30
 8003014:	d013      	beq.n	800303e <UART_SetConfig+0x16e>
 8003016:	2b30      	cmp	r3, #48	; 0x30
 8003018:	d814      	bhi.n	8003044 <UART_SetConfig+0x174>
 800301a:	2b20      	cmp	r3, #32
 800301c:	d009      	beq.n	8003032 <UART_SetConfig+0x162>
 800301e:	2b20      	cmp	r3, #32
 8003020:	d810      	bhi.n	8003044 <UART_SetConfig+0x174>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <UART_SetConfig+0x15c>
 8003026:	2b10      	cmp	r3, #16
 8003028:	d006      	beq.n	8003038 <UART_SetConfig+0x168>
 800302a:	e00b      	b.n	8003044 <UART_SetConfig+0x174>
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e0f1      	b.n	8003216 <UART_SetConfig+0x346>
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e0ee      	b.n	8003216 <UART_SetConfig+0x346>
 8003038:	2304      	movs	r3, #4
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0eb      	b.n	8003216 <UART_SetConfig+0x346>
 800303e:	2308      	movs	r3, #8
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e0e8      	b.n	8003216 <UART_SetConfig+0x346>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0e5      	b.n	8003216 <UART_SetConfig+0x346>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a57      	ldr	r2, [pc, #348]	; (80031ac <UART_SetConfig+0x2dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d120      	bne.n	8003096 <UART_SetConfig+0x1c6>
 8003054:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <UART_SetConfig+0x2d0>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800305e:	2bc0      	cmp	r3, #192	; 0xc0
 8003060:	d013      	beq.n	800308a <UART_SetConfig+0x1ba>
 8003062:	2bc0      	cmp	r3, #192	; 0xc0
 8003064:	d814      	bhi.n	8003090 <UART_SetConfig+0x1c0>
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d009      	beq.n	800307e <UART_SetConfig+0x1ae>
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d810      	bhi.n	8003090 <UART_SetConfig+0x1c0>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <UART_SetConfig+0x1a8>
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d006      	beq.n	8003084 <UART_SetConfig+0x1b4>
 8003076:	e00b      	b.n	8003090 <UART_SetConfig+0x1c0>
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e0cb      	b.n	8003216 <UART_SetConfig+0x346>
 800307e:	2302      	movs	r3, #2
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e0c8      	b.n	8003216 <UART_SetConfig+0x346>
 8003084:	2304      	movs	r3, #4
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e0c5      	b.n	8003216 <UART_SetConfig+0x346>
 800308a:	2308      	movs	r3, #8
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e0c2      	b.n	8003216 <UART_SetConfig+0x346>
 8003090:	2310      	movs	r3, #16
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0bf      	b.n	8003216 <UART_SetConfig+0x346>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <UART_SetConfig+0x2e0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d125      	bne.n	80030ec <UART_SetConfig+0x21c>
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <UART_SetConfig+0x2d0>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ae:	d017      	beq.n	80030e0 <UART_SetConfig+0x210>
 80030b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b4:	d817      	bhi.n	80030e6 <UART_SetConfig+0x216>
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d00b      	beq.n	80030d4 <UART_SetConfig+0x204>
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c0:	d811      	bhi.n	80030e6 <UART_SetConfig+0x216>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <UART_SetConfig+0x1fe>
 80030c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ca:	d006      	beq.n	80030da <UART_SetConfig+0x20a>
 80030cc:	e00b      	b.n	80030e6 <UART_SetConfig+0x216>
 80030ce:	2300      	movs	r3, #0
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e0a0      	b.n	8003216 <UART_SetConfig+0x346>
 80030d4:	2302      	movs	r3, #2
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e09d      	b.n	8003216 <UART_SetConfig+0x346>
 80030da:	2304      	movs	r3, #4
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e09a      	b.n	8003216 <UART_SetConfig+0x346>
 80030e0:	2308      	movs	r3, #8
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e097      	b.n	8003216 <UART_SetConfig+0x346>
 80030e6:	2310      	movs	r3, #16
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e094      	b.n	8003216 <UART_SetConfig+0x346>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <UART_SetConfig+0x2e4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d125      	bne.n	8003142 <UART_SetConfig+0x272>
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <UART_SetConfig+0x2d0>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003104:	d017      	beq.n	8003136 <UART_SetConfig+0x266>
 8003106:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800310a:	d817      	bhi.n	800313c <UART_SetConfig+0x26c>
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003110:	d00b      	beq.n	800312a <UART_SetConfig+0x25a>
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003116:	d811      	bhi.n	800313c <UART_SetConfig+0x26c>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <UART_SetConfig+0x254>
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d006      	beq.n	8003130 <UART_SetConfig+0x260>
 8003122:	e00b      	b.n	800313c <UART_SetConfig+0x26c>
 8003124:	2301      	movs	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e075      	b.n	8003216 <UART_SetConfig+0x346>
 800312a:	2302      	movs	r3, #2
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e072      	b.n	8003216 <UART_SetConfig+0x346>
 8003130:	2304      	movs	r3, #4
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e06f      	b.n	8003216 <UART_SetConfig+0x346>
 8003136:	2308      	movs	r3, #8
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e06c      	b.n	8003216 <UART_SetConfig+0x346>
 800313c:	2310      	movs	r3, #16
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e069      	b.n	8003216 <UART_SetConfig+0x346>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <UART_SetConfig+0x2e8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d137      	bne.n	80031bc <UART_SetConfig+0x2ec>
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <UART_SetConfig+0x2d0>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800315a:	d017      	beq.n	800318c <UART_SetConfig+0x2bc>
 800315c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003160:	d817      	bhi.n	8003192 <UART_SetConfig+0x2c2>
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d00b      	beq.n	8003180 <UART_SetConfig+0x2b0>
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316c:	d811      	bhi.n	8003192 <UART_SetConfig+0x2c2>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <UART_SetConfig+0x2aa>
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d006      	beq.n	8003186 <UART_SetConfig+0x2b6>
 8003178:	e00b      	b.n	8003192 <UART_SetConfig+0x2c2>
 800317a:	2300      	movs	r3, #0
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e04a      	b.n	8003216 <UART_SetConfig+0x346>
 8003180:	2302      	movs	r3, #2
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e047      	b.n	8003216 <UART_SetConfig+0x346>
 8003186:	2304      	movs	r3, #4
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e044      	b.n	8003216 <UART_SetConfig+0x346>
 800318c:	2308      	movs	r3, #8
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e041      	b.n	8003216 <UART_SetConfig+0x346>
 8003192:	2310      	movs	r3, #16
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e03e      	b.n	8003216 <UART_SetConfig+0x346>
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	40011000 	.word	0x40011000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40004800 	.word	0x40004800
 80031ac:	40004c00 	.word	0x40004c00
 80031b0:	40005000 	.word	0x40005000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	40007800 	.word	0x40007800
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a71      	ldr	r2, [pc, #452]	; (8003388 <UART_SetConfig+0x4b8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d125      	bne.n	8003212 <UART_SetConfig+0x342>
 80031c6:	4b71      	ldr	r3, [pc, #452]	; (800338c <UART_SetConfig+0x4bc>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031d4:	d017      	beq.n	8003206 <UART_SetConfig+0x336>
 80031d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031da:	d817      	bhi.n	800320c <UART_SetConfig+0x33c>
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	d00b      	beq.n	80031fa <UART_SetConfig+0x32a>
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e6:	d811      	bhi.n	800320c <UART_SetConfig+0x33c>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <UART_SetConfig+0x324>
 80031ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f0:	d006      	beq.n	8003200 <UART_SetConfig+0x330>
 80031f2:	e00b      	b.n	800320c <UART_SetConfig+0x33c>
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e00d      	b.n	8003216 <UART_SetConfig+0x346>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e00a      	b.n	8003216 <UART_SetConfig+0x346>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e007      	b.n	8003216 <UART_SetConfig+0x346>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e004      	b.n	8003216 <UART_SetConfig+0x346>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e001      	b.n	8003216 <UART_SetConfig+0x346>
 8003212:	2310      	movs	r3, #16
 8003214:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d15b      	bne.n	80032d8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003220:	7ffb      	ldrb	r3, [r7, #31]
 8003222:	2b08      	cmp	r3, #8
 8003224:	d827      	bhi.n	8003276 <UART_SetConfig+0x3a6>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <UART_SetConfig+0x35c>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003251 	.word	0x08003251
 8003230:	08003259 	.word	0x08003259
 8003234:	08003261 	.word	0x08003261
 8003238:	08003277 	.word	0x08003277
 800323c:	08003267 	.word	0x08003267
 8003240:	08003277 	.word	0x08003277
 8003244:	08003277 	.word	0x08003277
 8003248:	08003277 	.word	0x08003277
 800324c:	0800326f 	.word	0x0800326f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003250:	f7fe fd2c 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8003254:	61b8      	str	r0, [r7, #24]
        break;
 8003256:	e013      	b.n	8003280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7fe fd3c 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <UART_SetConfig+0x4c0>)
 8003262:	61bb      	str	r3, [r7, #24]
        break;
 8003264:	e00c      	b.n	8003280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003266:	f7fe fc33 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 800326a:	61b8      	str	r0, [r7, #24]
        break;
 800326c:	e008      	b.n	8003280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	61bb      	str	r3, [r7, #24]
        break;
 8003274:	e004      	b.n	8003280 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	77bb      	strb	r3, [r7, #30]
        break;
 800327e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d074      	beq.n	8003370 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	005a      	lsls	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	b29b      	uxth	r3, r3
 800329c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b0f      	cmp	r3, #15
 80032a2:	d916      	bls.n	80032d2 <UART_SetConfig+0x402>
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d212      	bcs.n	80032d2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f023 030f 	bic.w	r3, r3, #15
 80032b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	89fa      	ldrh	r2, [r7, #14]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	e04e      	b.n	8003370 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	77bb      	strb	r3, [r7, #30]
 80032d6:	e04b      	b.n	8003370 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d827      	bhi.n	800332e <UART_SetConfig+0x45e>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x414>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003309 	.word	0x08003309
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003319 	.word	0x08003319
 80032f0:	0800332f 	.word	0x0800332f
 80032f4:	0800331f 	.word	0x0800331f
 80032f8:	0800332f 	.word	0x0800332f
 80032fc:	0800332f 	.word	0x0800332f
 8003300:	0800332f 	.word	0x0800332f
 8003304:	08003327 	.word	0x08003327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003308:	f7fe fcd0 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 800330c:	61b8      	str	r0, [r7, #24]
        break;
 800330e:	e013      	b.n	8003338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7fe fce0 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8003314:	61b8      	str	r0, [r7, #24]
        break;
 8003316:	e00f      	b.n	8003338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <UART_SetConfig+0x4c0>)
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e00c      	b.n	8003338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331e:	f7fe fbd7 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8003322:	61b8      	str	r0, [r7, #24]
        break;
 8003324:	e008      	b.n	8003338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	61bb      	str	r3, [r7, #24]
        break;
 800332c:	e004      	b.n	8003338 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	77bb      	strb	r3, [r7, #30]
        break;
 8003336:	bf00      	nop
    }

    if (pclk != 0U)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d018      	beq.n	8003370 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	085a      	lsrs	r2, r3, #1
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	441a      	add	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d908      	bls.n	800336c <UART_SetConfig+0x49c>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d204      	bcs.n	800336c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e001      	b.n	8003370 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800337c:	7fbb      	ldrb	r3, [r7, #30]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40007c00 	.word	0x40007c00
 800338c:	40023800 	.word	0x40023800
 8003390:	00f42400 	.word	0x00f42400

08003394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01a      	beq.n	80034aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003492:	d10a      	bne.n	80034aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e8:	f7fd fc6c 	bl	8000dc4 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d10e      	bne.n	800351a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f82d 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e023      	b.n	8003562 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d10e      	bne.n	8003546 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f817 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e00d      	b.n	8003562 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	e05e      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d05a      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fd fc1e 	bl	8000dc4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11b      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e043      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02c      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ee:	d124      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003608:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d091      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003664:	b084      	sub	sp, #16
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	f107 001c 	add.w	r0, r7, #28
 8003672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800367a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800367c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800367e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003682:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003686:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800368a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800368e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <SDMMC_Init+0x54>)
 800369c:	4013      	ands	r3, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	b004      	add	sp, #16
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	ffff8100 	.word	0xffff8100

080036bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80036ca:	2002      	movs	r0, #2
 80036cc:	f7fd fb86 	bl	8000ddc <HAL_Delay>
  
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0303 	and.w	r3, r3, #3
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003716:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800371c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003722:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SDMMC_SendCommand+0x50>)
 8003730:	4013      	ands	r3, r2
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	fffff000 	.word	0xfffff000

0800374c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	b2db      	uxtb	r3, r3
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3314      	adds	r3, #20
 8003774:	461a      	mov	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
}  
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800379a:	2310      	movs	r3, #16
 800379c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037ac:	f107 0308 	add.w	r3, r7, #8
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa0 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	2110      	movs	r1, #16
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f936 	bl	8003a30 <SDMMC_GetCmdResp1>
 80037c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037c6:	69fb      	ldr	r3, [r7, #28]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80037e0:	2307      	movs	r3, #7
 80037e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037e4:	2340      	movs	r3, #64	; 0x40
 80037e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037f2:	f107 0310 	add.w	r3, r7, #16
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ff7d 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	2107      	movs	r1, #7
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f913 	bl	8003a30 <SDMMC_GetCmdResp1>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800382e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003832:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff5c 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8c9 	bl	80039d8 <SDMMC_GetCmdError>
 8003846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003848:	69fb      	ldr	r3, [r7, #28]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800385a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800385e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003860:	2308      	movs	r3, #8
 8003862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800386c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff3d 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fac0 	bl	8003e04 <SDMMC_GetCmdResp7>
 8003884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003886:	69fb      	ldr	r3, [r7, #28]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800389e:	2337      	movs	r3, #55	; 0x37
 80038a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff1e 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	2137      	movs	r1, #55	; 0x37
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8b4 	bl	8003a30 <SDMMC_GetCmdResp1>
 80038c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ca:	69fb      	ldr	r3, [r7, #28]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <SDMMC_CmdAppOperCommand+0x44>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80038e6:	2329      	movs	r3, #41	; 0x29
 80038e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fefa 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f9c9 	bl	8003c9c <SDMMC_GetCmdResp3>
 800390a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800390c:	69fb      	ldr	r3, [r7, #28]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	80100000 	.word	0x80100000

0800391c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003928:	2302      	movs	r3, #2
 800392a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800392c:	23c0      	movs	r3, #192	; 0xc0
 800392e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fed9 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f960 	bl	8003c0c <SDMMC_GetCmdResp2>
 800394c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800394e:	69fb      	ldr	r3, [r7, #28]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003966:	2309      	movs	r3, #9
 8003968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800396a:	23c0      	movs	r3, #192	; 0xc0
 800396c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003978:	f107 0308 	add.w	r3, r7, #8
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff feba 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f941 	bl	8003c0c <SDMMC_GetCmdResp2>
 800398a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800398c:	69fb      	ldr	r3, [r7, #28]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80039a4:	2303      	movs	r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80039a8:	2340      	movs	r3, #64	; 0x40
 80039aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe9b 	bl	80036f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	2103      	movs	r1, #3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9a6 	bl	8003d18 <SDMMC_GetCmdResp6>
 80039cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039ce:	69fb      	ldr	r3, [r7, #28]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <SDMMC_GetCmdError+0x50>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <SDMMC_GetCmdError+0x54>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	0a5b      	lsrs	r3, r3, #9
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	60fa      	str	r2, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a04:	e009      	b.n	8003a1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f1      	beq.n	80039f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	22c5      	movs	r2, #197	; 0xc5
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a3e:	4b70      	ldr	r3, [pc, #448]	; (8003c00 <SDMMC_GetCmdResp1+0x1d0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a70      	ldr	r2, [pc, #448]	; (8003c04 <SDMMC_GetCmdResp1+0x1d4>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	0a5a      	lsrs	r2, r3, #9
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	61fa      	str	r2, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a60:	e0c9      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0ef      	beq.n	8003a52 <SDMMC_GetCmdResp1+0x22>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ea      	bne.n	8003a52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e0b1      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0a6      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	22c5      	movs	r2, #197	; 0xc5
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff fe4c 	bl	800374c <SDMMC_GetCommandResponse>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d001      	beq.n	8003ac2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e099      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff fe4e 	bl	8003766 <SDMMC_GetResponse>
 8003aca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <SDMMC_GetCmdResp1+0x1d8>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e08d      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da02      	bge.n	8003ae6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003ae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae4:	e087      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	e080      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	e079      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b10:	e071      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b20:	e069      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b30:	e061      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b40:	e059      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b50:	e051      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b60:	e049      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003b6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b70:	e041      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b80:	e039      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b90:	e031      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003b9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ba0:	e029      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003bac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003bb0:	e021      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003bbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bc0:	e019      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bd0:	e011      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003bdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003be0:	e009      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003bec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003bf0:	e001      	b.n	8003bf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000
 8003c04:	10624dd3 	.word	0x10624dd3
 8003c08:	fdffe008 	.word	0xfdffe008

08003c0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <SDMMC_GetCmdResp2+0x88>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <SDMMC_GetCmdResp2+0x8c>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c38:	e026      	b.n	8003c88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ef      	beq.n	8003c2a <SDMMC_GetCmdResp2+0x1e>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ea      	bne.n	8003c2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2204      	movs	r2, #4
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c66:	2304      	movs	r3, #4
 8003c68:	e00e      	b.n	8003c88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e003      	b.n	8003c88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	22c5      	movs	r2, #197	; 0xc5
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20000000 	.word	0x20000000
 8003c98:	10624dd3 	.word	0x10624dd3

08003c9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <SDMMC_GetCmdResp3+0x74>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <SDMMC_GetCmdResp3+0x78>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a5b      	lsrs	r3, r3, #9
 8003cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	60fa      	str	r2, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003cc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003cc8:	e01b      	b.n	8003d02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <SDMMC_GetCmdResp3+0x1e>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ea      	bne.n	8003cba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e003      	b.n	8003d02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	22c5      	movs	r2, #197	; 0xc5
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	460b      	mov	r3, r1
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <SDMMC_GetCmdResp6+0xe4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <SDMMC_GetCmdResp6+0xe8>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	0a5b      	lsrs	r3, r3, #9
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	61fa      	str	r2, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d4a:	e052      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <SDMMC_GetCmdResp6+0x24>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ea      	bne.n	8003d3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e03a      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e02f      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fcda 	bl	800374c <SDMMC_GetCommandResponse>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d001      	beq.n	8003da6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e025      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	22c5      	movs	r2, #197	; 0xc5
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003dac:	2100      	movs	r1, #0
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fcd9 	bl	8003766 <SDMMC_GetResponse>
 8003db4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e011      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ddc:	e009      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dec:	e001      	b.n	8003df2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	10624dd3 	.word	0x10624dd3

08003e04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <SDMMC_GetCmdResp7+0x94>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <SDMMC_GetCmdResp7+0x98>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a5b      	lsrs	r3, r3, #9
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	60fa      	str	r2, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e30:	e02c      	b.n	8003e8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0ef      	beq.n	8003e22 <SDMMC_GetCmdResp7+0x1e>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e014      	b.n	8003e8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e009      	b.n	8003e8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
  
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <__errno>:
 8003ea0:	4b01      	ldr	r3, [pc, #4]	; (8003ea8 <__errno+0x8>)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4d0d      	ldr	r5, [pc, #52]	; (8003ee4 <__libc_init_array+0x38>)
 8003eb0:	4c0d      	ldr	r4, [pc, #52]	; (8003ee8 <__libc_init_array+0x3c>)
 8003eb2:	1b64      	subs	r4, r4, r5
 8003eb4:	10a4      	asrs	r4, r4, #2
 8003eb6:	2600      	movs	r6, #0
 8003eb8:	42a6      	cmp	r6, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	4d0b      	ldr	r5, [pc, #44]	; (8003eec <__libc_init_array+0x40>)
 8003ebe:	4c0c      	ldr	r4, [pc, #48]	; (8003ef0 <__libc_init_array+0x44>)
 8003ec0:	f000 fc62 	bl	8004788 <_init>
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	2600      	movs	r6, #0
 8003eca:	42a6      	cmp	r6, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed4:	4798      	blx	r3
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ede:	4798      	blx	r3
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	08004870 	.word	0x08004870
 8003ee8:	08004870 	.word	0x08004870
 8003eec:	08004870 	.word	0x08004870
 8003ef0:	08004874 	.word	0x08004874

08003ef4 <memset>:
 8003ef4:	4402      	add	r2, r0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d100      	bne.n	8003efe <memset+0xa>
 8003efc:	4770      	bx	lr
 8003efe:	f803 1b01 	strb.w	r1, [r3], #1
 8003f02:	e7f9      	b.n	8003ef8 <memset+0x4>

08003f04 <sniprintf>:
 8003f04:	b40c      	push	{r2, r3}
 8003f06:	b530      	push	{r4, r5, lr}
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <sniprintf+0x64>)
 8003f0a:	1e0c      	subs	r4, r1, #0
 8003f0c:	681d      	ldr	r5, [r3, #0]
 8003f0e:	b09d      	sub	sp, #116	; 0x74
 8003f10:	da08      	bge.n	8003f24 <sniprintf+0x20>
 8003f12:	238b      	movs	r3, #139	; 0x8b
 8003f14:	602b      	str	r3, [r5, #0]
 8003f16:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1a:	b01d      	add	sp, #116	; 0x74
 8003f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f20:	b002      	add	sp, #8
 8003f22:	4770      	bx	lr
 8003f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f2c:	bf14      	ite	ne
 8003f2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f32:	4623      	moveq	r3, r4
 8003f34:	9304      	str	r3, [sp, #16]
 8003f36:	9307      	str	r3, [sp, #28]
 8003f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f3c:	9002      	str	r0, [sp, #8]
 8003f3e:	9006      	str	r0, [sp, #24]
 8003f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f46:	ab21      	add	r3, sp, #132	; 0x84
 8003f48:	a902      	add	r1, sp, #8
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	f000 f869 	bl	8004024 <_svfiprintf_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	bfbc      	itt	lt
 8003f56:	238b      	movlt	r3, #139	; 0x8b
 8003f58:	602b      	strlt	r3, [r5, #0]
 8003f5a:	2c00      	cmp	r4, #0
 8003f5c:	d0dd      	beq.n	8003f1a <sniprintf+0x16>
 8003f5e:	9b02      	ldr	r3, [sp, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e7d9      	b.n	8003f1a <sniprintf+0x16>
 8003f66:	bf00      	nop
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <__ssputs_r>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	688e      	ldr	r6, [r1, #8]
 8003f72:	429e      	cmp	r6, r3
 8003f74:	4682      	mov	sl, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	4690      	mov	r8, r2
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	d838      	bhi.n	8003ff0 <__ssputs_r+0x84>
 8003f7e:	898a      	ldrh	r2, [r1, #12]
 8003f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f84:	d032      	beq.n	8003fec <__ssputs_r+0x80>
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	6909      	ldr	r1, [r1, #16]
 8003f8a:	eba5 0901 	sub.w	r9, r5, r1
 8003f8e:	6965      	ldr	r5, [r4, #20]
 8003f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f98:	3301      	adds	r3, #1
 8003f9a:	444b      	add	r3, r9
 8003f9c:	106d      	asrs	r5, r5, #1
 8003f9e:	429d      	cmp	r5, r3
 8003fa0:	bf38      	it	cc
 8003fa2:	461d      	movcc	r5, r3
 8003fa4:	0553      	lsls	r3, r2, #21
 8003fa6:	d531      	bpl.n	800400c <__ssputs_r+0xa0>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f000 fb47 	bl	800463c <_malloc_r>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	b950      	cbnz	r0, 8003fc8 <__ssputs_r+0x5c>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	464a      	mov	r2, r9
 8003fcc:	f000 fabe 	bl	800454c <memcpy>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6126      	str	r6, [r4, #16]
 8003fde:	6165      	str	r5, [r4, #20]
 8003fe0:	444e      	add	r6, r9
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	6026      	str	r6, [r4, #0]
 8003fe8:	60a5      	str	r5, [r4, #8]
 8003fea:	463e      	mov	r6, r7
 8003fec:	42be      	cmp	r6, r7
 8003fee:	d900      	bls.n	8003ff2 <__ssputs_r+0x86>
 8003ff0:	463e      	mov	r6, r7
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	f000 fab6 	bl	8004568 <memmove>
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	4432      	add	r2, r6
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	6022      	str	r2, [r4, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	e7db      	b.n	8003fc4 <__ssputs_r+0x58>
 800400c:	462a      	mov	r2, r5
 800400e:	f000 fb6f 	bl	80046f0 <_realloc_r>
 8004012:	4606      	mov	r6, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d1e1      	bne.n	8003fdc <__ssputs_r+0x70>
 8004018:	6921      	ldr	r1, [r4, #16]
 800401a:	4650      	mov	r0, sl
 800401c:	f000 fabe 	bl	800459c <_free_r>
 8004020:	e7c7      	b.n	8003fb2 <__ssputs_r+0x46>
	...

08004024 <_svfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4698      	mov	r8, r3
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	b09d      	sub	sp, #116	; 0x74
 8004030:	4607      	mov	r7, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4614      	mov	r4, r2
 8004036:	d50e      	bpl.n	8004056 <_svfiprintf_r+0x32>
 8004038:	690b      	ldr	r3, [r1, #16]
 800403a:	b963      	cbnz	r3, 8004056 <_svfiprintf_r+0x32>
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	f000 fafd 	bl	800463c <_malloc_r>
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6128      	str	r0, [r5, #16]
 8004046:	b920      	cbnz	r0, 8004052 <_svfiprintf_r+0x2e>
 8004048:	230c      	movs	r3, #12
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e0d1      	b.n	80041f6 <_svfiprintf_r+0x1d2>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	616b      	str	r3, [r5, #20]
 8004056:	2300      	movs	r3, #0
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	2320      	movs	r3, #32
 800405c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004060:	f8cd 800c 	str.w	r8, [sp, #12]
 8004064:	2330      	movs	r3, #48	; 0x30
 8004066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004210 <_svfiprintf_r+0x1ec>
 800406a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800406e:	f04f 0901 	mov.w	r9, #1
 8004072:	4623      	mov	r3, r4
 8004074:	469a      	mov	sl, r3
 8004076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800407a:	b10a      	cbz	r2, 8004080 <_svfiprintf_r+0x5c>
 800407c:	2a25      	cmp	r2, #37	; 0x25
 800407e:	d1f9      	bne.n	8004074 <_svfiprintf_r+0x50>
 8004080:	ebba 0b04 	subs.w	fp, sl, r4
 8004084:	d00b      	beq.n	800409e <_svfiprintf_r+0x7a>
 8004086:	465b      	mov	r3, fp
 8004088:	4622      	mov	r2, r4
 800408a:	4629      	mov	r1, r5
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff ff6d 	bl	8003f6c <__ssputs_r>
 8004092:	3001      	adds	r0, #1
 8004094:	f000 80aa 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 8004098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800409a:	445a      	add	r2, fp
 800409c:	9209      	str	r2, [sp, #36]	; 0x24
 800409e:	f89a 3000 	ldrb.w	r3, [sl]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a2 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 80040a8:	2300      	movs	r3, #0
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b2:	f10a 0a01 	add.w	sl, sl, #1
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	9307      	str	r3, [sp, #28]
 80040ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040be:	931a      	str	r3, [sp, #104]	; 0x68
 80040c0:	4654      	mov	r4, sl
 80040c2:	2205      	movs	r2, #5
 80040c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c8:	4851      	ldr	r0, [pc, #324]	; (8004210 <_svfiprintf_r+0x1ec>)
 80040ca:	f7fc f8b9 	bl	8000240 <memchr>
 80040ce:	9a04      	ldr	r2, [sp, #16]
 80040d0:	b9d8      	cbnz	r0, 800410a <_svfiprintf_r+0xe6>
 80040d2:	06d0      	lsls	r0, r2, #27
 80040d4:	bf44      	itt	mi
 80040d6:	2320      	movmi	r3, #32
 80040d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040dc:	0711      	lsls	r1, r2, #28
 80040de:	bf44      	itt	mi
 80040e0:	232b      	movmi	r3, #43	; 0x2b
 80040e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ea:	2b2a      	cmp	r3, #42	; 0x2a
 80040ec:	d015      	beq.n	800411a <_svfiprintf_r+0xf6>
 80040ee:	9a07      	ldr	r2, [sp, #28]
 80040f0:	4654      	mov	r4, sl
 80040f2:	2000      	movs	r0, #0
 80040f4:	f04f 0c0a 	mov.w	ip, #10
 80040f8:	4621      	mov	r1, r4
 80040fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fe:	3b30      	subs	r3, #48	; 0x30
 8004100:	2b09      	cmp	r3, #9
 8004102:	d94e      	bls.n	80041a2 <_svfiprintf_r+0x17e>
 8004104:	b1b0      	cbz	r0, 8004134 <_svfiprintf_r+0x110>
 8004106:	9207      	str	r2, [sp, #28]
 8004108:	e014      	b.n	8004134 <_svfiprintf_r+0x110>
 800410a:	eba0 0308 	sub.w	r3, r0, r8
 800410e:	fa09 f303 	lsl.w	r3, r9, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	46a2      	mov	sl, r4
 8004118:	e7d2      	b.n	80040c0 <_svfiprintf_r+0x9c>
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9103      	str	r1, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfbb      	ittet	lt
 8004126:	425b      	neglt	r3, r3
 8004128:	f042 0202 	orrlt.w	r2, r2, #2
 800412c:	9307      	strge	r3, [sp, #28]
 800412e:	9307      	strlt	r3, [sp, #28]
 8004130:	bfb8      	it	lt
 8004132:	9204      	strlt	r2, [sp, #16]
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	d10c      	bne.n	8004154 <_svfiprintf_r+0x130>
 800413a:	7863      	ldrb	r3, [r4, #1]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d135      	bne.n	80041ac <_svfiprintf_r+0x188>
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	9203      	str	r2, [sp, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	bfb8      	it	lt
 800414c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004150:	3402      	adds	r4, #2
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004220 <_svfiprintf_r+0x1fc>
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	2203      	movs	r2, #3
 800415c:	4650      	mov	r0, sl
 800415e:	f7fc f86f 	bl	8000240 <memchr>
 8004162:	b140      	cbz	r0, 8004176 <_svfiprintf_r+0x152>
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	eba0 000a 	sub.w	r0, r0, sl
 800416a:	fa03 f000 	lsl.w	r0, r3, r0
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	4303      	orrs	r3, r0
 8004172:	3401      	adds	r4, #1
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417a:	4826      	ldr	r0, [pc, #152]	; (8004214 <_svfiprintf_r+0x1f0>)
 800417c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004180:	2206      	movs	r2, #6
 8004182:	f7fc f85d 	bl	8000240 <memchr>
 8004186:	2800      	cmp	r0, #0
 8004188:	d038      	beq.n	80041fc <_svfiprintf_r+0x1d8>
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <_svfiprintf_r+0x1f4>)
 800418c:	bb1b      	cbnz	r3, 80041d6 <_svfiprintf_r+0x1b2>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	3308      	adds	r3, #8
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419c:	4433      	add	r3, r6
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	e767      	b.n	8004072 <_svfiprintf_r+0x4e>
 80041a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a6:	460c      	mov	r4, r1
 80041a8:	2001      	movs	r0, #1
 80041aa:	e7a5      	b.n	80040f8 <_svfiprintf_r+0xd4>
 80041ac:	2300      	movs	r3, #0
 80041ae:	3401      	adds	r4, #1
 80041b0:	9305      	str	r3, [sp, #20]
 80041b2:	4619      	mov	r1, r3
 80041b4:	f04f 0c0a 	mov.w	ip, #10
 80041b8:	4620      	mov	r0, r4
 80041ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041be:	3a30      	subs	r2, #48	; 0x30
 80041c0:	2a09      	cmp	r2, #9
 80041c2:	d903      	bls.n	80041cc <_svfiprintf_r+0x1a8>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0c5      	beq.n	8004154 <_svfiprintf_r+0x130>
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	e7c3      	b.n	8004154 <_svfiprintf_r+0x130>
 80041cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d0:	4604      	mov	r4, r0
 80041d2:	2301      	movs	r3, #1
 80041d4:	e7f0      	b.n	80041b8 <_svfiprintf_r+0x194>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <_svfiprintf_r+0x1f8>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	4638      	mov	r0, r7
 80041e2:	f3af 8000 	nop.w
 80041e6:	1c42      	adds	r2, r0, #1
 80041e8:	4606      	mov	r6, r0
 80041ea:	d1d6      	bne.n	800419a <_svfiprintf_r+0x176>
 80041ec:	89ab      	ldrh	r3, [r5, #12]
 80041ee:	065b      	lsls	r3, r3, #25
 80041f0:	f53f af2c 	bmi.w	800404c <_svfiprintf_r+0x28>
 80041f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f6:	b01d      	add	sp, #116	; 0x74
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	ab03      	add	r3, sp, #12
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	462a      	mov	r2, r5
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <_svfiprintf_r+0x1f8>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	4638      	mov	r0, r7
 8004208:	f000 f87a 	bl	8004300 <_printf_i>
 800420c:	e7eb      	b.n	80041e6 <_svfiprintf_r+0x1c2>
 800420e:	bf00      	nop
 8004210:	08004834 	.word	0x08004834
 8004214:	0800483e 	.word	0x0800483e
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f6d 	.word	0x08003f6d
 8004220:	0800483a 	.word	0x0800483a

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4616      	mov	r6, r2
 800422a:	4699      	mov	r9, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	4293      	cmp	r3, r2
 8004236:	bfb8      	it	lt
 8004238:	4613      	movlt	r3, r2
 800423a:	6033      	str	r3, [r6, #0]
 800423c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004240:	4607      	mov	r7, r0
 8004242:	460c      	mov	r4, r1
 8004244:	b10a      	cbz	r2, 800424a <_printf_common+0x26>
 8004246:	3301      	adds	r3, #1
 8004248:	6033      	str	r3, [r6, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0699      	lsls	r1, r3, #26
 800424e:	bf42      	ittt	mi
 8004250:	6833      	ldrmi	r3, [r6, #0]
 8004252:	3302      	addmi	r3, #2
 8004254:	6033      	strmi	r3, [r6, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	f015 0506 	ands.w	r5, r5, #6
 800425c:	d106      	bne.n	800426c <_printf_common+0x48>
 800425e:	f104 0a19 	add.w	sl, r4, #25
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	6832      	ldr	r2, [r6, #0]
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	42ab      	cmp	r3, r5
 800426a:	dc26      	bgt.n	80042ba <_printf_common+0x96>
 800426c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004270:	1e13      	subs	r3, r2, #0
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	bf18      	it	ne
 8004276:	2301      	movne	r3, #1
 8004278:	0692      	lsls	r2, r2, #26
 800427a:	d42b      	bmi.n	80042d4 <_printf_common+0xb0>
 800427c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d01e      	beq.n	80042c8 <_printf_common+0xa4>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	68e5      	ldr	r5, [r4, #12]
 800428e:	6832      	ldr	r2, [r6, #0]
 8004290:	f003 0306 	and.w	r3, r3, #6
 8004294:	2b04      	cmp	r3, #4
 8004296:	bf08      	it	eq
 8004298:	1aad      	subeq	r5, r5, r2
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	bf0c      	ite	eq
 80042a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a4:	2500      	movne	r5, #0
 80042a6:	4293      	cmp	r3, r2
 80042a8:	bfc4      	itt	gt
 80042aa:	1a9b      	subgt	r3, r3, r2
 80042ac:	18ed      	addgt	r5, r5, r3
 80042ae:	2600      	movs	r6, #0
 80042b0:	341a      	adds	r4, #26
 80042b2:	42b5      	cmp	r5, r6
 80042b4:	d11a      	bne.n	80042ec <_printf_common+0xc8>
 80042b6:	2000      	movs	r0, #0
 80042b8:	e008      	b.n	80042cc <_printf_common+0xa8>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	4649      	mov	r1, r9
 80042c0:	4638      	mov	r0, r7
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d103      	bne.n	80042d0 <_printf_common+0xac>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	3501      	adds	r5, #1
 80042d2:	e7c6      	b.n	8004262 <_printf_common+0x3e>
 80042d4:	18e1      	adds	r1, r4, r3
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042de:	4422      	add	r2, r4
 80042e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e8:	3302      	adds	r3, #2
 80042ea:	e7c7      	b.n	800427c <_printf_common+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4622      	mov	r2, r4
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0e6      	beq.n	80042c8 <_printf_common+0xa4>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7d9      	b.n	80042b2 <_printf_common+0x8e>
	...

08004300 <_printf_i>:
 8004300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	460c      	mov	r4, r1
 8004306:	4691      	mov	r9, r2
 8004308:	7e27      	ldrb	r7, [r4, #24]
 800430a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800430c:	2f78      	cmp	r7, #120	; 0x78
 800430e:	4680      	mov	r8, r0
 8004310:	469a      	mov	sl, r3
 8004312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004316:	d807      	bhi.n	8004328 <_printf_i+0x28>
 8004318:	2f62      	cmp	r7, #98	; 0x62
 800431a:	d80a      	bhi.n	8004332 <_printf_i+0x32>
 800431c:	2f00      	cmp	r7, #0
 800431e:	f000 80d8 	beq.w	80044d2 <_printf_i+0x1d2>
 8004322:	2f58      	cmp	r7, #88	; 0x58
 8004324:	f000 80a3 	beq.w	800446e <_printf_i+0x16e>
 8004328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800432c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004330:	e03a      	b.n	80043a8 <_printf_i+0xa8>
 8004332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004336:	2b15      	cmp	r3, #21
 8004338:	d8f6      	bhi.n	8004328 <_printf_i+0x28>
 800433a:	a001      	add	r0, pc, #4	; (adr r0, 8004340 <_printf_i+0x40>)
 800433c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004340:	08004399 	.word	0x08004399
 8004344:	080043ad 	.word	0x080043ad
 8004348:	08004329 	.word	0x08004329
 800434c:	08004329 	.word	0x08004329
 8004350:	08004329 	.word	0x08004329
 8004354:	08004329 	.word	0x08004329
 8004358:	080043ad 	.word	0x080043ad
 800435c:	08004329 	.word	0x08004329
 8004360:	08004329 	.word	0x08004329
 8004364:	08004329 	.word	0x08004329
 8004368:	08004329 	.word	0x08004329
 800436c:	080044b9 	.word	0x080044b9
 8004370:	080043dd 	.word	0x080043dd
 8004374:	0800449b 	.word	0x0800449b
 8004378:	08004329 	.word	0x08004329
 800437c:	08004329 	.word	0x08004329
 8004380:	080044db 	.word	0x080044db
 8004384:	08004329 	.word	0x08004329
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004329 	.word	0x08004329
 8004390:	08004329 	.word	0x08004329
 8004394:	080044a3 	.word	0x080044a3
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	600a      	str	r2, [r1, #0]
 80043a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0a3      	b.n	80044f4 <_printf_i+0x1f4>
 80043ac:	6825      	ldr	r5, [r4, #0]
 80043ae:	6808      	ldr	r0, [r1, #0]
 80043b0:	062e      	lsls	r6, r5, #24
 80043b2:	f100 0304 	add.w	r3, r0, #4
 80043b6:	d50a      	bpl.n	80043ce <_printf_i+0xce>
 80043b8:	6805      	ldr	r5, [r0, #0]
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	2d00      	cmp	r5, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xc8>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	426d      	negs	r5, r5
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	485e      	ldr	r0, [pc, #376]	; (8004544 <_printf_i+0x244>)
 80043ca:	230a      	movs	r3, #10
 80043cc:	e019      	b.n	8004402 <_printf_i+0x102>
 80043ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043d2:	6805      	ldr	r5, [r0, #0]
 80043d4:	600b      	str	r3, [r1, #0]
 80043d6:	bf18      	it	ne
 80043d8:	b22d      	sxthne	r5, r5
 80043da:	e7ef      	b.n	80043bc <_printf_i+0xbc>
 80043dc:	680b      	ldr	r3, [r1, #0]
 80043de:	6825      	ldr	r5, [r4, #0]
 80043e0:	1d18      	adds	r0, r3, #4
 80043e2:	6008      	str	r0, [r1, #0]
 80043e4:	0628      	lsls	r0, r5, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xec>
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <_printf_i+0xf2>
 80043ec:	0669      	lsls	r1, r5, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xe8>
 80043f0:	881d      	ldrh	r5, [r3, #0]
 80043f2:	4854      	ldr	r0, [pc, #336]	; (8004544 <_printf_i+0x244>)
 80043f4:	2f6f      	cmp	r7, #111	; 0x6f
 80043f6:	bf0c      	ite	eq
 80043f8:	2308      	moveq	r3, #8
 80043fa:	230a      	movne	r3, #10
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004402:	6866      	ldr	r6, [r4, #4]
 8004404:	60a6      	str	r6, [r4, #8]
 8004406:	2e00      	cmp	r6, #0
 8004408:	bfa2      	ittt	ge
 800440a:	6821      	ldrge	r1, [r4, #0]
 800440c:	f021 0104 	bicge.w	r1, r1, #4
 8004410:	6021      	strge	r1, [r4, #0]
 8004412:	b90d      	cbnz	r5, 8004418 <_printf_i+0x118>
 8004414:	2e00      	cmp	r6, #0
 8004416:	d04d      	beq.n	80044b4 <_printf_i+0x1b4>
 8004418:	4616      	mov	r6, r2
 800441a:	fbb5 f1f3 	udiv	r1, r5, r3
 800441e:	fb03 5711 	mls	r7, r3, r1, r5
 8004422:	5dc7      	ldrb	r7, [r0, r7]
 8004424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004428:	462f      	mov	r7, r5
 800442a:	42bb      	cmp	r3, r7
 800442c:	460d      	mov	r5, r1
 800442e:	d9f4      	bls.n	800441a <_printf_i+0x11a>
 8004430:	2b08      	cmp	r3, #8
 8004432:	d10b      	bne.n	800444c <_printf_i+0x14c>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	07df      	lsls	r7, r3, #31
 8004438:	d508      	bpl.n	800444c <_printf_i+0x14c>
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6861      	ldr	r1, [r4, #4]
 800443e:	4299      	cmp	r1, r3
 8004440:	bfde      	ittt	le
 8004442:	2330      	movle	r3, #48	; 0x30
 8004444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800444c:	1b92      	subs	r2, r2, r6
 800444e:	6122      	str	r2, [r4, #16]
 8004450:	f8cd a000 	str.w	sl, [sp]
 8004454:	464b      	mov	r3, r9
 8004456:	aa03      	add	r2, sp, #12
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fee2 	bl	8004224 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	d14c      	bne.n	80044fe <_printf_i+0x1fe>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b004      	add	sp, #16
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	4835      	ldr	r0, [pc, #212]	; (8004544 <_printf_i+0x244>)
 8004470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	680e      	ldr	r6, [r1, #0]
 8004478:	061f      	lsls	r7, r3, #24
 800447a:	f856 5b04 	ldr.w	r5, [r6], #4
 800447e:	600e      	str	r6, [r1, #0]
 8004480:	d514      	bpl.n	80044ac <_printf_i+0x1ac>
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	bf44      	itt	mi
 8004486:	f043 0320 	orrmi.w	r3, r3, #32
 800448a:	6023      	strmi	r3, [r4, #0]
 800448c:	b91d      	cbnz	r5, 8004496 <_printf_i+0x196>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f023 0320 	bic.w	r3, r3, #32
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	2310      	movs	r3, #16
 8004498:	e7b0      	b.n	80043fc <_printf_i+0xfc>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	f043 0320 	orr.w	r3, r3, #32
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	2378      	movs	r3, #120	; 0x78
 80044a4:	4828      	ldr	r0, [pc, #160]	; (8004548 <_printf_i+0x248>)
 80044a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044aa:	e7e3      	b.n	8004474 <_printf_i+0x174>
 80044ac:	065e      	lsls	r6, r3, #25
 80044ae:	bf48      	it	mi
 80044b0:	b2ad      	uxthmi	r5, r5
 80044b2:	e7e6      	b.n	8004482 <_printf_i+0x182>
 80044b4:	4616      	mov	r6, r2
 80044b6:	e7bb      	b.n	8004430 <_printf_i+0x130>
 80044b8:	680b      	ldr	r3, [r1, #0]
 80044ba:	6826      	ldr	r6, [r4, #0]
 80044bc:	6960      	ldr	r0, [r4, #20]
 80044be:	1d1d      	adds	r5, r3, #4
 80044c0:	600d      	str	r5, [r1, #0]
 80044c2:	0635      	lsls	r5, r6, #24
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0x1cc>
 80044c8:	6018      	str	r0, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <_printf_i+0x1d2>
 80044cc:	0671      	lsls	r1, r6, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0x1c8>
 80044d0:	8018      	strh	r0, [r3, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	4616      	mov	r6, r2
 80044d8:	e7ba      	b.n	8004450 <_printf_i+0x150>
 80044da:	680b      	ldr	r3, [r1, #0]
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	600a      	str	r2, [r1, #0]
 80044e0:	681e      	ldr	r6, [r3, #0]
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	2100      	movs	r1, #0
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7fb feaa 	bl	8000240 <memchr>
 80044ec:	b108      	cbz	r0, 80044f2 <_printf_i+0x1f2>
 80044ee:	1b80      	subs	r0, r0, r6
 80044f0:	6060      	str	r0, [r4, #4]
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	2300      	movs	r3, #0
 80044f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fc:	e7a8      	b.n	8004450 <_printf_i+0x150>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	4632      	mov	r2, r6
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	47d0      	blx	sl
 8004508:	3001      	adds	r0, #1
 800450a:	d0ab      	beq.n	8004464 <_printf_i+0x164>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	079b      	lsls	r3, r3, #30
 8004510:	d413      	bmi.n	800453a <_printf_i+0x23a>
 8004512:	68e0      	ldr	r0, [r4, #12]
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	4298      	cmp	r0, r3
 8004518:	bfb8      	it	lt
 800451a:	4618      	movlt	r0, r3
 800451c:	e7a4      	b.n	8004468 <_printf_i+0x168>
 800451e:	2301      	movs	r3, #1
 8004520:	4632      	mov	r2, r6
 8004522:	4649      	mov	r1, r9
 8004524:	4640      	mov	r0, r8
 8004526:	47d0      	blx	sl
 8004528:	3001      	adds	r0, #1
 800452a:	d09b      	beq.n	8004464 <_printf_i+0x164>
 800452c:	3501      	adds	r5, #1
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	9903      	ldr	r1, [sp, #12]
 8004532:	1a5b      	subs	r3, r3, r1
 8004534:	42ab      	cmp	r3, r5
 8004536:	dcf2      	bgt.n	800451e <_printf_i+0x21e>
 8004538:	e7eb      	b.n	8004512 <_printf_i+0x212>
 800453a:	2500      	movs	r5, #0
 800453c:	f104 0619 	add.w	r6, r4, #25
 8004540:	e7f5      	b.n	800452e <_printf_i+0x22e>
 8004542:	bf00      	nop
 8004544:	08004845 	.word	0x08004845
 8004548:	08004856 	.word	0x08004856

0800454c <memcpy>:
 800454c:	440a      	add	r2, r1
 800454e:	4291      	cmp	r1, r2
 8004550:	f100 33ff 	add.w	r3, r0, #4294967295
 8004554:	d100      	bne.n	8004558 <memcpy+0xc>
 8004556:	4770      	bx	lr
 8004558:	b510      	push	{r4, lr}
 800455a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800455e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004562:	4291      	cmp	r1, r2
 8004564:	d1f9      	bne.n	800455a <memcpy+0xe>
 8004566:	bd10      	pop	{r4, pc}

08004568 <memmove>:
 8004568:	4288      	cmp	r0, r1
 800456a:	b510      	push	{r4, lr}
 800456c:	eb01 0402 	add.w	r4, r1, r2
 8004570:	d902      	bls.n	8004578 <memmove+0x10>
 8004572:	4284      	cmp	r4, r0
 8004574:	4623      	mov	r3, r4
 8004576:	d807      	bhi.n	8004588 <memmove+0x20>
 8004578:	1e43      	subs	r3, r0, #1
 800457a:	42a1      	cmp	r1, r4
 800457c:	d008      	beq.n	8004590 <memmove+0x28>
 800457e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004586:	e7f8      	b.n	800457a <memmove+0x12>
 8004588:	4402      	add	r2, r0
 800458a:	4601      	mov	r1, r0
 800458c:	428a      	cmp	r2, r1
 800458e:	d100      	bne.n	8004592 <memmove+0x2a>
 8004590:	bd10      	pop	{r4, pc}
 8004592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800459a:	e7f7      	b.n	800458c <memmove+0x24>

0800459c <_free_r>:
 800459c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800459e:	2900      	cmp	r1, #0
 80045a0:	d048      	beq.n	8004634 <_free_r+0x98>
 80045a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a6:	9001      	str	r0, [sp, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f1a1 0404 	sub.w	r4, r1, #4
 80045ae:	bfb8      	it	lt
 80045b0:	18e4      	addlt	r4, r4, r3
 80045b2:	f000 f8d3 	bl	800475c <__malloc_lock>
 80045b6:	4a20      	ldr	r2, [pc, #128]	; (8004638 <_free_r+0x9c>)
 80045b8:	9801      	ldr	r0, [sp, #4]
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	4615      	mov	r5, r2
 80045be:	b933      	cbnz	r3, 80045ce <_free_r+0x32>
 80045c0:	6063      	str	r3, [r4, #4]
 80045c2:	6014      	str	r4, [r2, #0]
 80045c4:	b003      	add	sp, #12
 80045c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ca:	f000 b8cd 	b.w	8004768 <__malloc_unlock>
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	d90b      	bls.n	80045ea <_free_r+0x4e>
 80045d2:	6821      	ldr	r1, [r4, #0]
 80045d4:	1862      	adds	r2, r4, r1
 80045d6:	4293      	cmp	r3, r2
 80045d8:	bf04      	itt	eq
 80045da:	681a      	ldreq	r2, [r3, #0]
 80045dc:	685b      	ldreq	r3, [r3, #4]
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	bf04      	itt	eq
 80045e2:	1852      	addeq	r2, r2, r1
 80045e4:	6022      	streq	r2, [r4, #0]
 80045e6:	602c      	str	r4, [r5, #0]
 80045e8:	e7ec      	b.n	80045c4 <_free_r+0x28>
 80045ea:	461a      	mov	r2, r3
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b10b      	cbz	r3, 80045f4 <_free_r+0x58>
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	d9fa      	bls.n	80045ea <_free_r+0x4e>
 80045f4:	6811      	ldr	r1, [r2, #0]
 80045f6:	1855      	adds	r5, r2, r1
 80045f8:	42a5      	cmp	r5, r4
 80045fa:	d10b      	bne.n	8004614 <_free_r+0x78>
 80045fc:	6824      	ldr	r4, [r4, #0]
 80045fe:	4421      	add	r1, r4
 8004600:	1854      	adds	r4, r2, r1
 8004602:	42a3      	cmp	r3, r4
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	d1dd      	bne.n	80045c4 <_free_r+0x28>
 8004608:	681c      	ldr	r4, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	6053      	str	r3, [r2, #4]
 800460e:	4421      	add	r1, r4
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	e7d7      	b.n	80045c4 <_free_r+0x28>
 8004614:	d902      	bls.n	800461c <_free_r+0x80>
 8004616:	230c      	movs	r3, #12
 8004618:	6003      	str	r3, [r0, #0]
 800461a:	e7d3      	b.n	80045c4 <_free_r+0x28>
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	1961      	adds	r1, r4, r5
 8004620:	428b      	cmp	r3, r1
 8004622:	bf04      	itt	eq
 8004624:	6819      	ldreq	r1, [r3, #0]
 8004626:	685b      	ldreq	r3, [r3, #4]
 8004628:	6063      	str	r3, [r4, #4]
 800462a:	bf04      	itt	eq
 800462c:	1949      	addeq	r1, r1, r5
 800462e:	6021      	streq	r1, [r4, #0]
 8004630:	6054      	str	r4, [r2, #4]
 8004632:	e7c7      	b.n	80045c4 <_free_r+0x28>
 8004634:	b003      	add	sp, #12
 8004636:	bd30      	pop	{r4, r5, pc}
 8004638:	20000090 	.word	0x20000090

0800463c <_malloc_r>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	1ccd      	adds	r5, r1, #3
 8004640:	f025 0503 	bic.w	r5, r5, #3
 8004644:	3508      	adds	r5, #8
 8004646:	2d0c      	cmp	r5, #12
 8004648:	bf38      	it	cc
 800464a:	250c      	movcc	r5, #12
 800464c:	2d00      	cmp	r5, #0
 800464e:	4606      	mov	r6, r0
 8004650:	db01      	blt.n	8004656 <_malloc_r+0x1a>
 8004652:	42a9      	cmp	r1, r5
 8004654:	d903      	bls.n	800465e <_malloc_r+0x22>
 8004656:	230c      	movs	r3, #12
 8004658:	6033      	str	r3, [r6, #0]
 800465a:	2000      	movs	r0, #0
 800465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800465e:	f000 f87d 	bl	800475c <__malloc_lock>
 8004662:	4921      	ldr	r1, [pc, #132]	; (80046e8 <_malloc_r+0xac>)
 8004664:	680a      	ldr	r2, [r1, #0]
 8004666:	4614      	mov	r4, r2
 8004668:	b99c      	cbnz	r4, 8004692 <_malloc_r+0x56>
 800466a:	4f20      	ldr	r7, [pc, #128]	; (80046ec <_malloc_r+0xb0>)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b923      	cbnz	r3, 800467a <_malloc_r+0x3e>
 8004670:	4621      	mov	r1, r4
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f862 	bl	800473c <_sbrk_r>
 8004678:	6038      	str	r0, [r7, #0]
 800467a:	4629      	mov	r1, r5
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f85d 	bl	800473c <_sbrk_r>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d123      	bne.n	80046ce <_malloc_r+0x92>
 8004686:	230c      	movs	r3, #12
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	4630      	mov	r0, r6
 800468c:	f000 f86c 	bl	8004768 <__malloc_unlock>
 8004690:	e7e3      	b.n	800465a <_malloc_r+0x1e>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	1b5b      	subs	r3, r3, r5
 8004696:	d417      	bmi.n	80046c8 <_malloc_r+0x8c>
 8004698:	2b0b      	cmp	r3, #11
 800469a:	d903      	bls.n	80046a4 <_malloc_r+0x68>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	441c      	add	r4, r3
 80046a0:	6025      	str	r5, [r4, #0]
 80046a2:	e004      	b.n	80046ae <_malloc_r+0x72>
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	42a2      	cmp	r2, r4
 80046a8:	bf0c      	ite	eq
 80046aa:	600b      	streq	r3, [r1, #0]
 80046ac:	6053      	strne	r3, [r2, #4]
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f85a 	bl	8004768 <__malloc_unlock>
 80046b4:	f104 000b 	add.w	r0, r4, #11
 80046b8:	1d23      	adds	r3, r4, #4
 80046ba:	f020 0007 	bic.w	r0, r0, #7
 80046be:	1ac2      	subs	r2, r0, r3
 80046c0:	d0cc      	beq.n	800465c <_malloc_r+0x20>
 80046c2:	1a1b      	subs	r3, r3, r0
 80046c4:	50a3      	str	r3, [r4, r2]
 80046c6:	e7c9      	b.n	800465c <_malloc_r+0x20>
 80046c8:	4622      	mov	r2, r4
 80046ca:	6864      	ldr	r4, [r4, #4]
 80046cc:	e7cc      	b.n	8004668 <_malloc_r+0x2c>
 80046ce:	1cc4      	adds	r4, r0, #3
 80046d0:	f024 0403 	bic.w	r4, r4, #3
 80046d4:	42a0      	cmp	r0, r4
 80046d6:	d0e3      	beq.n	80046a0 <_malloc_r+0x64>
 80046d8:	1a21      	subs	r1, r4, r0
 80046da:	4630      	mov	r0, r6
 80046dc:	f000 f82e 	bl	800473c <_sbrk_r>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d1dd      	bne.n	80046a0 <_malloc_r+0x64>
 80046e4:	e7cf      	b.n	8004686 <_malloc_r+0x4a>
 80046e6:	bf00      	nop
 80046e8:	20000090 	.word	0x20000090
 80046ec:	20000094 	.word	0x20000094

080046f0 <_realloc_r>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	4607      	mov	r7, r0
 80046f4:	4614      	mov	r4, r2
 80046f6:	460e      	mov	r6, r1
 80046f8:	b921      	cbnz	r1, 8004704 <_realloc_r+0x14>
 80046fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046fe:	4611      	mov	r1, r2
 8004700:	f7ff bf9c 	b.w	800463c <_malloc_r>
 8004704:	b922      	cbnz	r2, 8004710 <_realloc_r+0x20>
 8004706:	f7ff ff49 	bl	800459c <_free_r>
 800470a:	4625      	mov	r5, r4
 800470c:	4628      	mov	r0, r5
 800470e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004710:	f000 f830 	bl	8004774 <_malloc_usable_size_r>
 8004714:	42a0      	cmp	r0, r4
 8004716:	d20f      	bcs.n	8004738 <_realloc_r+0x48>
 8004718:	4621      	mov	r1, r4
 800471a:	4638      	mov	r0, r7
 800471c:	f7ff ff8e 	bl	800463c <_malloc_r>
 8004720:	4605      	mov	r5, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	d0f2      	beq.n	800470c <_realloc_r+0x1c>
 8004726:	4631      	mov	r1, r6
 8004728:	4622      	mov	r2, r4
 800472a:	f7ff ff0f 	bl	800454c <memcpy>
 800472e:	4631      	mov	r1, r6
 8004730:	4638      	mov	r0, r7
 8004732:	f7ff ff33 	bl	800459c <_free_r>
 8004736:	e7e9      	b.n	800470c <_realloc_r+0x1c>
 8004738:	4635      	mov	r5, r6
 800473a:	e7e7      	b.n	800470c <_realloc_r+0x1c>

0800473c <_sbrk_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	; (8004758 <_sbrk_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fc fa7a 	bl	8000c40 <_sbrk>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_sbrk_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_sbrk_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	200001a4 	.word	0x200001a4

0800475c <__malloc_lock>:
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <__malloc_lock+0x8>)
 800475e:	f000 b811 	b.w	8004784 <__retarget_lock_acquire_recursive>
 8004762:	bf00      	nop
 8004764:	200001ac 	.word	0x200001ac

08004768 <__malloc_unlock>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__malloc_unlock+0x8>)
 800476a:	f000 b80c 	b.w	8004786 <__retarget_lock_release_recursive>
 800476e:	bf00      	nop
 8004770:	200001ac 	.word	0x200001ac

08004774 <_malloc_usable_size_r>:
 8004774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004778:	1f18      	subs	r0, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	bfbc      	itt	lt
 800477e:	580b      	ldrlt	r3, [r1, r0]
 8004780:	18c0      	addlt	r0, r0, r3
 8004782:	4770      	bx	lr

08004784 <__retarget_lock_acquire_recursive>:
 8004784:	4770      	bx	lr

08004786 <__retarget_lock_release_recursive>:
 8004786:	4770      	bx	lr

08004788 <_init>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr

08004794 <_fini>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr
